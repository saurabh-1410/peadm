---
name: "Failover test"

on:
  workflow_dispatch:
    inputs:
      image:
        description: 'GCP image for test cluster'
        required: true
        default: 'almalinux-cloud/almalinux-8'
      version:
        description: 'PE version to install'
        required: true
        default: '2019.8.12'
      version_to_upgrade:
        description: 'PE version to upgrade to'
        required: false
        default: '2021.7.2'
      ssh-debugging:
        description: 'Boolean; whether or not to pause for ssh debugging'
        required: true
        default: 'false'
      log_level:
        description: 'Bolt log level'
        required: false
        default: 'debug'

env:
  HONEYCOMB_WRITEKEY: 7f3c63a70eecc61d635917de46bea4e6
  HONEYCOMB_DATASET: litmus tests

jobs:
  test-failover:
    name: "PE ${{ matrix.version }} ${{ matrix.architecture }} on ${{ matrix.image }}"
    runs-on: ubuntu-20.04
    env:
      BOLT_GEM: true
      BOLT_DISABLE_ANALYTICS: true
      BUILDEVENT_FILE: '../buildevents.txt'
      LANG: 'en_US.UTF-8'
    strategy:
      fail-fast: false
      matrix:
        version:
          - "${{ github.event.inputs.version }}"
        image:
          - "${{ github.event.inputs.image }}"
        architecture:
          - "extra-large-with-dr"
    steps:
      - name: 'Start SSH session'
        if: ${{ github.event.inputs.ssh-debugging == 'true' }}
        uses: luchihoratiu/debug-via-ssh@main
        with:
          NGROK_AUTH_TOKEN: ${{ secrets.NGROK_AUTH_TOKEN }}
          SSH_PASS: ${{ secrets.SSH_PASS }}

      - name: "Honeycomb: Start recording"
        uses: puppetlabs/kvrhdn-gha-buildevents@pdk-templates-v1
        with:
          apikey: ${{ env.HONEYCOMB_WRITEKEY }}
          dataset: ${{ env.HONEYCOMB_DATASET }}
          job-status: ${{ job.status }}

      - name: "Honeycomb: Start first step"
        run: |
          echo STEP_ID=setup-test-cluster >> $GITHUB_ENV
          echo STEP_START=$(date +%s) >> $GITHUB_ENV

      - name: "Checkout Source"
        uses: actions/checkout@v2

      - name: "Activate Ruby 2.7"
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: "2.7"
          bundler-cache: true

      - name: "Print bundle environment"
        if: ${{ github.repository_owner == 'puppetlabs' }}
        run: |
          echo ::group::info:bundler
            buildevents cmd $TRACE_ID $STEP_ID 'bundle env' -- bundle env
          echo ::endgroup::

      - name: "Honeycomb: Record environment setup time"
        if: ${{ always() }}
        run: |
          echo ::group::honeycomb
            buildevents step $TRACE_ID $STEP_ID $STEP_START 'Set up environment'
            echo STEP_ID=${{ matrix.architecture }}-${{ matrix.image }}-provision >> $GITHUB_ENV
            echo STEP_START=$(date +%s) >> $GITHUB_ENV
          echo ::endgroup::

      - name: 'Provision test cluster (XL with spare replica)'
        timeout-minutes: 15
        run: |
          echo ::group::prepare
            mkdir -p $HOME/.ssh
            echo 'Host *'                      >  $HOME/.ssh/config
            echo '    ServerAliveInterval 150' >> $HOME/.ssh/config
            echo '    ServerAliveCountMax 2'   >> $HOME/.ssh/config
            buildevents cmd $TRACE_ID $STEP_ID 'rake spec_prep' -- bundle exec rake spec_prep
          echo ::endgroup::

          echo ::group::provision
            buildevents cmd $TRACE_ID $STEP_ID 'bolt plan run peadm_spec::provision_test_cluster' -- \
              bundle exec bolt plan run peadm_spec::provision_test_cluster \
                --modulepath spec/fixtures/modules \
                provider=provision_service \
                image=${{ matrix.image }} \
                architecture=${{ matrix.architecture }}-and-spare-replica
          echo ::endgroup::

          echo ::group::info:request
            cat request.json || true; echo
          echo ::endgroup::

          echo ::group::info:inventory
            sed -e 's/password: .*/password: "[redacted]"/' < spec/fixtures/litmus_inventory.yaml || true
          echo ::endgroup::

      - name: "Honeycomb: Record provision time"
        if: ${{ always() }}
        run: |
          echo ::group::honeycomb
            buildevents step $TRACE_ID $STEP_ID $STEP_START 'Provision test cluster'
            echo STEP_ID=${{ matrix.architecture }}-${{ matrix.image }}-install >> $GITHUB_ENV
            echo STEP_START=$(date +%s) >> $GITHUB_ENV
          echo ::endgroup::

      - name: 'Install PE on test cluster'
        timeout-minutes: 120
        run: |
          buildevents cmd $TRACE_ID $STEP_ID 'bolt plan run peadm_spec::install_test_cluster' -- \
            bundle exec bolt plan run peadm_spec::install_test_cluster --log_level ${{ github.event.inputs.log_level }} \
              --inventoryfile spec/fixtures/litmus_inventory.yaml \
              --modulepath spec/fixtures/modules \
              architecture=${{ matrix.architecture }} \
              version=${{ matrix.version }}

      - name: "Honeycomb: Record install time"
        if: ${{ always() }}
        run: |
          echo ::group::honeycomb
            buildevents step $TRACE_ID $STEP_ID $STEP_START 'Install PE on test cluster'
            echo STEP_ID=${{ matrix.architecture }}-${{ matrix.image }}-tear_down >> $GITHUB_ENV
            echo STEP_START=$(date +%s) >> $GITHUB_ENV
          echo ::endgroup::

      - name: 'Perform failover'
        run: |
          buildevents cmd $TRACE_ID $STEP_ID 'bolt plan run peadm_spec::perform_failover' -- \
            bundle exec bolt plan run peadm_spec::perform_failover --log_level ${{ github.event.inputs.log_level }} \
              --inventoryfile spec/fixtures/litmus_inventory.yaml \
              --modulepath spec/fixtures/modules

      - name: "Honeycomb: Record falover time"
        if: ${{ always() }}
        run: |
          echo ::group::honeycomb
            buildevents step $TRACE_ID $STEP_ID $STEP_START 'Perform failover'
            echo STEP_ID=${{ matrix.architecture }}-${{ matrix.image }}-tear_down >> $GITHUB_ENV
            echo STEP_START=$(date +%s) >> $GITHUB_ENV
          echo ::endgroup::

      - name: 'Wait as long as the file ${HOME}/pause file is present'
        if: ${{ always() && github.event.inputs.ssh-debugging == 'true' }}
        run: |
          while [ -f "${HOME}/pause" ] ; do
            echo "${HOME}/pause present, sleeping for 60 seconds..."
            sleep 60
          done 
          echo "${HOME}/pause absent, continuing workflow."

      - name: Set up yq
        uses: frenck/action-setup-yq@v1
        with:
          version: v4.30.5

      - name: 'Update inventory'
        run: |
          # Remove failed primary
          yq -i 'del(.groups[].targets[] | select(.vars.role == "primary"))' spec/fixtures/litmus_inventory.yaml
          # Swap primary and replica nodes
          sed -i.sedbak 's/primary/__tmp__/;s/spare-replica/__tmp2__/;s/replica/primary/;s/__tmp__/replica/;s/__tmp2__/replica/' \
              spec/fixtures/litmus_inventory.yaml
          echo ::group::info:inventory
            sed -e 's/password: .*/password: "[redacted]"/' < spec/fixtures/litmus_inventory.yaml || true
          echo ::endgroup::

      - name: 'Upgrade PE on test cluster'
        if: ${{ success() && github.event.inputs.version_to_upgrade != '' }}
        timeout-minutes: 120
        run: |
          buildevents cmd $TRACE_ID $STEP_ID 'bolt plan run peadm_spec::upgrade_test_cluster' -- \
            bundle exec bolt plan run peadm_spec::upgrade_test_cluster --log_level ${{ github.event.inputs.log_level }} \
              --inventoryfile spec/fixtures/litmus_inventory.yaml \
              --modulepath spec/fixtures/modules \
              architecture=${{ matrix.architecture }} \
              download_mode='direct' \
              version=${{ github.event.inputs.version_to_upgrade }}

      - name: "Honeycomb: Record upgrade time"
        if: ${{ success() && github.event.inputs.version_to_upgrade != '' }}
        run: |
          echo ::group::honeycomb
            buildevents step $TRACE_ID $STEP_ID $STEP_START 'Upgrade PE on test cluster'
            echo STEP_ID=${{ matrix.architecture }}-${{ matrix.version_to_upgrade }}-tear_down >> $GITHUB_ENV
            echo STEP_START=$(date +%s) >> $GITHUB_ENV
          echo ::endgroup::

      - name: 'Tear down test cluster'
        if: ${{ always() }}
        continue-on-error: true
        run: |
          if [ -f spec/fixtures/litmus_inventory.yaml ]; then
            echo ::group::tear_down
              buildevents cmd $TRACE_ID $STEP_ID 'rake litmus:tear_down' -- bundle exec rake 'litmus:tear_down'
            echo ::endgroup::

            echo ::group::info:request
              cat request.json || true; echo
            echo ::endgroup::
          fi

      - name: "Honeycomb: Record tear down time"
        if: ${{ always() }}
        run: |
          echo ::group::honeycomb
            buildevents step $TRACE_ID $STEP_ID $STEP_START 'Tear down test cluster'
          echo ::endgroup::
